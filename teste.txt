x_range = (-10, 9)
len_range = x_range[1] - x_range[0] + 1
cartesian_map = [[0] * len_range for i in range(len_range)]

def quad_func(x: float):
    return 1 + x + (x**2)
    
for x in range(x_range[0], x_range[1] + 1):
    y = quad_func(x)
    if 0 <= y < len_range:
        cartesian_map[y][x + abs(x_range[0])] = 1
        
for i in cartesian_map:
    for j in i:
        print(f'{j if j == 1 else "-"}', end='')
    print()

    
class CartesianMap:
    
    def __init__(self, x_start: int, x_end: int, func: int):
        self.__x_start = x_start
        self.__X_end = x_end
        self.__domain_len = x_end - x_start + 1
        self.__func = func
        self.__map = [[0] * self.__domain_len for i in range(self.__domain_len)]
        
    def fill_map():
        for x in range(x_range[0], x_range[1] + 1):
            y = quad_func(x)
            if 0 <= y < len_range:
                cartesian_map[y][x + abs(x_range[0])] = 1
        
    @staticmethod
    def quad_func(x: float):
        return 1 + x + (x**2)
        
    